class Consumer:

    def __init__(self, **kwargs):
        self.service_name = kwargs.get('service_name', None)
        self.bootstrap_servers = kwargs.get('bootstrap_servers', None)
        self.schema_registry = kwargs.get('schema_registry', None)
        self.consumer_topic = kwargs.get('consumer_topic', None)
        self.consumer = AvroConsumer({'bootstrap.servers': self.bootstrap_servers,
                                      'schema.registry.url': self.schema_registry,
                                      'group.id': 'anonymous_lab_consumer_abc_123',
                                      'session.timeout.ms': 6000,
                                      'enable.auto.commit': 'false',
                                      'log.connection.close': 'false',
                                      'security.protocol':'ssl',
                                      'debug':'security',
                                      'default.topic.config': {'auto.offset.reset': 'earliest'}
                                      })
        self.consumer.subscribe(self.consumer_topic)
        threading.Thread.__init__(self, name='sma')
        self.stop_event = threading.Event()
        logging.basicConfig(
            format='%(asctime)s.%(msecs)s:%(name)s:%(thread)d:%(levelname)s:%(process)d:%(message)s',
            level=logging.INFO
        )
        logging.getLogger('urllib3.connectionpool').setLevel(logging.INFO)
        #self.streamer = Streamer(topic_name=os.environ.get('anonymous-labs-data-topic','tc-anonymous-labs-data'))

